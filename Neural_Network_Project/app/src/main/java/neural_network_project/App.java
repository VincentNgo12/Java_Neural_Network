/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package neural_network_project;

import neural_network_project.Network;
import neural_network_project.Network1;
import neural_network_project.Network2;
import neural_network_project.Layers.FullyConnectedLayer;
import neural_network_project.ActivationFuncs.Sigmoid;
import neural_network_project.ActivationFuncs.TanhA;
import neural_network_project.ActivationFuncs.Tanh;
import neural_network_project.ActivationFuncs.HardTanh;
import neural_network_project.Helpers.MnistCSVLoader;
import neural_network_project.Helpers.PixelsArrayLoader;
import java.util.ArrayList;
import java.util.List;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.api.ndarray.INDArray;

//import processing.core.*;

public class App {

    public static void main(String[] args) {
        String trainingFile = "/workspaces/Java_Neural_Network/Neural_Network_Project/resources/MNIST/mnist_train.csv";
        String testFile = "/workspaces/Java_Neural_Network/Neural_Network_Project/resources/MNIST/mnist_test.csv";

        List<List<INDArray>> training_datas = MnistCSVLoader.LoadData(trainingFile);
        List<List<INDArray>> testing_datas = MnistCSVLoader.LoadData(testFile);


        // Network1 net = new Network1(new int[]{784 , 30, 10});
        // net.stochasticGradientDescent(training_datas, 1, 10, 3.0f, testing_datas);
        Network net = new Network(new FullyConnectedLayer(784, 30),
                                    new Sigmoid(),
                                    new FullyConnectedLayer(30, 10),
                                    new Sigmoid());

        net.stochastic_gradient_descent(training_datas, 20, 10, 3.0f, testing_datas);
        // net.saveNetwork("/workspaces/Java_Neural_Network/Neural_Network_Project/app/src/main/java/neural_network_project/network.ser");

        // Network net = Network.loadNetwork("/workspaces/Java_Neural_Network/Neural_Network_Project/app/src/main/java/neural_network_project/network.ser");
        // net.info();
        // for(int i=0; i<100; i++){
        //     System.out.printf("#%d: %d/10000 \n", i, net.evaluate(testing_datas));
        // }
    }


    // PImage screenshot;
    // float[] grayscalePixels;
    
    // public void settings() {
    // 	size(400, 400);
    // }
    
    
    // public void setup() {
    	 
    // 	background(0);
	// }

	// public void draw() {
	// 	if(mousePressed){
	// 		stroke(255);
	// 		strokeWeight(20);
	// 		line(pmouseX,pmouseY,mouseX,mouseY);
	// 	}
	// }
	
	
	// public void keyPressed(){
	// 	if(key == 's'){
	// 		screenshot = get();
	// 		screenshot.resize(28,28);
	// 		grayscalePixels = new float[screenshot.pixels.length];
			
	// 		screenshot.loadPixels();
	// 		for (int i = 0; i < screenshot.pixels.length; i++) {
	// 			// Extract the RGB components of the pixel
	// 			int c = screenshot.pixels[i];

	// 			// Calculate the grayscale value
	// 			float grayscaleValue = (red(c) + green(c) + blue(c)) / 3;

	// 			// Store the grayscale value in the new array
	// 			grayscalePixels[i] = grayscaleValue;
	// 		}

	// 		println(grayscalePixels);
			
	// 	}else if(key == 'e'){
	// 		background(0);
	// 	}else if(key == 'p') {
	// 		INDArray input = PixelsArrayLoader.getData(this.grayscalePixels);
	// 		INDArray result = net.feedforward(input);
			
	// 		int predicted_number = Nd4j.argMax(result).getInt(0);
			
	// 		println("The Computer thinks this is a " + predicted_number);
	// 	}
	// }
}
