/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package neural_network_project;

import neural_network_project.Network;
import neural_network_project.Network1;
import neural_network_project.Network2;
import neural_network_project.Layers.FullyConnectedLayer;
import neural_network_project.ActivationFuncs.Sigmoid;
import neural_network_project.ActivationFuncs.TanhA;
import neural_network_project.ActivationFuncs.Tanh;
import neural_network_project.ActivationFuncs.HardTanh;
import neural_network_project.ActivationFuncs.ReLU;
import neural_network_project.Helpers.MnistCSVLoader;
import neural_network_project.Helpers.PixelsArrayLoader;
import java.util.ArrayList;
import java.util.List;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.api.ndarray.INDArray;

//import processing.core.*;

public class App {

    public static void main(String[] args) {
        String trainingFile = "/workspaces/Java_Neural_Network/Neural_Network_Project/resources/MNIST/MNIST_training_dataset.csv";
		String trainingFile1 = "/workspaces/Java_Neural_Network/Neural_Network_Project/resources/MNIST/mnist_train.csv";
        String testFile = "/workspaces/Java_Neural_Network/Neural_Network_Project/resources/MNIST/mnist_test.csv";

        List<List<INDArray>> training_datas = MnistCSVLoader.LoadData(trainingFile1);
        List<List<INDArray>> testing_datas = MnistCSVLoader.LoadData(testFile);


        Network net = new Network(new FullyConnectedLayer(784, 100),
                                    new ReLU(),
                                    new FullyConnectedLayer(100, 10),
                                    new ReLU());

        net.stochastic_gradient_descent(training_datas, 5, 10, 0.05f, 5.0f, testing_datas);
        // net.saveNetwork("/workspaces/Java_Neural_Network/Neural_Network_Project/app/src/main/java/neural_network_project/network.ser");

        // Network net = Network.loadNetwork("/workspaces/Java_Neural_Network/Neural_Network_Project/app/src/main/java/neural_network_project/network.ser");
        // net.info();
        // for(int i=0; i<100; i++){
        //     System.out.printf("#%d: %d/10000 \n", i, net.evaluate(testing_datas));
        // }
    }


	PImage screenshot;
	float[] grayscalePixels;
	int CANVA_LENGTH = 250;
	int CANVA_POSX = 50;
	int CANVA_POSY = 70;
	int STROKE_WEIGHT = 20;
   
	public void settings() {
		size(800, 400);
	}
   
   
	public void setup() {
	   background(100);
	   fill(0);
	   noStroke();
	   rect(CANVA_POSX, CANVA_POSY, CANVA_LENGTH, CANVA_LENGTH);
	}

	public void draw() {
	   if(mousePressed && mouseInCanva()){
		   stroke(255);
		 strokeWeight(STROKE_WEIGHT);
		   line(pmouseX,pmouseY,mouseX,mouseY);
	   }
	   
	   fill(255);
	   textSize(40);
	   text("The Computer Thinks", 400, 50);
	   text("It's A", 550, 90);
	}
   
   
	public void keyPressed(){
		if(key == 's'){
			screenshot = get();
			screenshot.resize(28,28);
			grayscalePixels = new float[screenshot.pixels.length];
		   
			screenshot.loadPixels();
			for (int i = 0; i < screenshot.pixels.length; i++) {
				// Extract the RGB components of the pixel
				int c = screenshot.pixels[i];

				// Calculate the grayscale value
				float grayscaleValue = (red(c) + green(c) + blue(c)) / 3;

				// Store the grayscale value in the new array
				grayscalePixels[i] = grayscaleValue;
			}

			println(grayscalePixels);
		   
		}else if(key == 'e'){
			setup();
		}else if(key == 'p') {
			INDArray input = PixelsArrayLoader.getData(this.grayscalePixels);
			INDArray result = net.feedforward(input);
		   
		int predicted_number = Nd4j.argMax(result).getInt(0);
		   
			println("The Computer thinks this is a " + predicted_number);
		}
   }
	
	public boolean mouseInCanva(){
	   return ((mouseX>=CANVA_POSX && mouseX<=(CANVA_LENGTH+CANVA_POSX)) && (mouseY>=CANVA_POSY && mouseY<=(CANVA_LENGTH+CANVA_POSY)));
   }
	
	public void mouseReleased(){
	   if(mouseInCanva()){
		   screenshot = get(CANVA_POSX, CANVA_POSY, CANVA_LENGTH, CANVA_LENGTH);
		   screenshot.resize(28,28);
			grayscalePixels = new float[screenshot.pixels.length];
		   
			screenshot.loadPixels();
			for (int i = 0; i < screenshot.pixels.length; i++) {
				// Extract the RGB components of the pixel
				int c = screenshot.pixels[i];

				// Calculate the grayscale value
				float grayscaleValue = (red(c) + green(c) + blue(c)) / 3;

				// Store the grayscale value in the new array
				grayscalePixels[i] = grayscaleValue;
	   }
	   
		
		INDArray input = PixelsArrayLoader.getData(this.grayscalePixels);
		INDArray result = net.feedforward(input);
		   
		int predicted_number = Nd4j.argMax(result).getInt(0);
		

	   textSize(70);
	   text(predicted_number, 550, 250);
	   }
   }
}
